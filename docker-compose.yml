version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-seafood_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-seafood123}
      POSTGRES_DB: ${POSTGRES_DB:-seafood_store}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-seafood_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/backend.Dockerfile
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - POSTGRES_USER=${POSTGRES_USER:-seafood_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-seafood123}
      - POSTGRES_DB=${POSTGRES_DB:-seafood_store}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - WEB_APP_URL=${WEB_APP_URL}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./frontend/webapp:/app/static/webapp
    command: >
      sh -c "
        alembic upgrade head &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Telegram Bot
  telegram-bot:
    build:
      context: ./telegram_bot
      dockerfile: ../docker/bot.Dockerfile
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - WEB_APP_URL=${WEB_APP_URL}
      - BACKEND_API_URL=http://backend:8000/api/v1
      - ADMIN_CHAT_ID=${ADMIN_CHAT_ID}
    depends_on:
      - backend
    volumes:
      - ./telegram_bot:/app
    command: python main.py
    restart: unless-stopped

  # Admin Panel
  admin:
    build:
      context: ./admin
      dockerfile: ../docker/admin.Dockerfile
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-seafood_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-seafood123}
      - POSTGRES_DB=${POSTGRES_DB:-seafood_store}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "5001:5000"
    volumes:
      - ./admin:/app

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "8081:80"
      - "8444:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./frontend/webapp:/var/www/webapp
    depends_on:
      - backend
      - admin
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: