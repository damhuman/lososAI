name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    name: Backend Tests (Python/FastAPI)
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: seafood_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install backend dependencies
      run: |
        cd backend
        pip install -r requirements.txt

    - name: Set up environment variables
      run: |
        cd backend
        cat > .env << EOF
        SECRET_KEY=test-secret-key-for-github-actions
        DATABASE_URL=postgresql+asyncpg://test_user:test_password@localhost:5432/seafood_test
        REDIS_URL=redis://localhost:6379/0
        TELEGRAM_BOT_TOKEN=test_token
        ADMIN_CHAT_ID=123456789
        ENVIRONMENT=test
        EOF

    - name: Run database migrations
      run: |
        cd backend
        python -c "
        import asyncio
        import asyncpg
        async def create_db():
            conn = await asyncpg.connect('postgresql://test_user:test_password@localhost:5432/postgres')
            try:
                await conn.execute('CREATE DATABASE seafood_test')
            except:
                pass  # Database might already exist
            await conn.close()
        asyncio.run(create_db())
        "
        alembic upgrade head

    - name: Run backend tests
      run: |
        cd backend
        pytest tests/ -v --tb=short --maxfail=5
      env:
        PYTHONPATH: .

    - name: Run backend tests with coverage
      run: |
        cd backend
        pytest tests/ --cov=app --cov-report=xml --cov-report=term-missing
      env:
        PYTHONPATH: .

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    name: Frontend Tests (Jest/Telegram Mini App)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/webapp/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend/webapp
        npm ci

    - name: Run frontend tests
      run: |
        cd frontend/webapp
        npm test -- --watchAll=false --coverage

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./frontend/webapp/coverage
        flags: frontend
        name: frontend-coverage

  integration-tests:
    name: Integration Tests (E2E)
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and start services
      run: |
        # Create test environment file
        cat > .env << EOF
        SECRET_KEY=test-secret-key-for-integration
        POSTGRES_DB=seafood_store
        POSTGRES_USER=seafood_user
        POSTGRES_PASSWORD=test_password
        REDIS_URL=redis://redis:6379/0
        TELEGRAM_BOT_TOKEN=test_token
        ADMIN_CHAT_ID=123456789
        WEB_APP_URL=https://example.com
        ENVIRONMENT=test
        EOF
        
        # Start services with reduced resources for CI
        docker-compose up -d --build
        
        # Wait for services to be ready
        sleep 30

    - name: Run health checks
      run: |
        # Wait for backend to be ready
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
        echo "✅ Backend is ready"
        
        # Test database connection
        docker-compose exec -T backend python -c "
        import asyncio
        from app.db.session import get_async_session
        async def test():
            async for session in get_async_session():
                print('✅ Database connection OK')
                break
        asyncio.run(test())
        "

    - name: Run integration tests
      run: |
        # Test API endpoints
        curl -f http://localhost:8000/api/v1/categories || exit 1
        curl -f http://localhost:8000/health || exit 1
        echo "✅ Integration tests passed"

    - name: Show service logs on failure
      if: failure()
      run: |
        echo "=== Backend Logs ==="
        docker-compose logs backend
        echo "=== Database Logs ==="
        docker-compose logs db
        echo "=== Docker Compose Status ==="
        docker-compose ps

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests]
    if: always()

    steps:
    - name: Generate test summary
      run: |
        echo "# 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.backend-tests.result }}" == "success" ]]; then
          echo "✅ **Backend Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Backend Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.frontend-tests.result }}" == "success" ]]; then
          echo "✅ **Frontend Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Frontend Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "✅ **Integration Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Integration Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **Coverage reports** available in job artifacts" >> $GITHUB_STEP_SUMMARY