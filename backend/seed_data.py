"""
Seed data script to populate the database with initial data for testing
"""
import asyncio
from sqlalchemy.ext.asyncio import AsyncSession
from app.db.session import AsyncSessionLocal
from app.db.models.product import Category, Product, District, PromoCode


async def create_categories():
    """Create product categories"""
    categories = [
        Category(
            id="salmon",
            name="–õ–æ—Å–æ—Å—å",
            icon="üêü",
            order=1,
            is_active=True
        ),
        Category(
            id="shellfish",
            name="–ú–æ–ª—é—Å–∫–∏",
            icon="ü¶ê",
            order=2,
            is_active=True
        ),
        Category(
            id="tomyum",
            name="Tom Yum –Ω–∞–±—ñ—Ä",
            icon="üçú",
            order=3,
            is_active=True
        ),
        Category(
            id="caviar",
            name="–Ü–∫—Ä–∞",
            icon="ü•ö",
            order=4,
            is_active=True
        )
    ]
    return categories


async def create_products():
    """Create sample products"""
    products = [
        # Salmon products
        Product(
            id="salmon_salted_001",
            category_id="salmon",
            name="–õ–æ—Å–æ—Å—å —Å–æ–ª–µ–Ω–∏–π",
            description="–°–≤—ñ–∂–∏–π –Ω–æ—Ä–≤–µ–∑—å–∫–∏–π –ª–æ—Å–æ—Å—å —Å–ª–∞–±–æ—Å–æ–ª–µ–Ω–∏–π",
            price_per_kg=750,
            image_url="/static/images/salmon_salted.jpg",
            packages=[
                {"id": "05kg", "weight": 0.5, "unit": "–∫–≥", "available": True},
                {"id": "1kg", "weight": 1, "unit": "–∫–≥", "available": True},
                {"id": "plate", "weight": 1.6, "unit": "–ø–ª–∞—Å—Ç", "available": True, "note": "–°–µ—Ä–µ–¥–Ω—è –≤–∞–≥–∞ –ø–ª–∞—Å—Ç–∞"}
            ],
            is_active=True,
            is_featured=True
        ),
        Product(
            id="salmon_smoked_001",
            category_id="salmon",
            name="–õ–æ—Å–æ—Å—å –∫–æ–ø—á–µ–Ω–∏–π",
            description="–°–≤—ñ–∂–∏–π –Ω–æ—Ä–≤–µ–∑—å–∫–∏–π –ª–æ—Å–æ—Å—å —Ö–æ–ª–æ–¥–Ω–æ–≥–æ –∫–æ–ø—á–µ–Ω–Ω—è",
            price_per_kg=850,
            image_url="/static/images/salmon_smoked.jpg",
            packages=[
                {"id": "05kg", "weight": 0.5, "unit": "–∫–≥", "available": True},
                {"id": "1kg", "weight": 1, "unit": "–∫–≥", "available": True},
                {"id": "plate", "weight": 1.6, "unit": "–ø–ª–∞—Å—Ç", "available": True, "note": "–°–µ—Ä–µ–¥–Ω—è –≤–∞–≥–∞ –ø–ª–∞—Å—Ç–∞"}
            ],
            is_active=True,
            is_featured=True
        ),
        Product(
            id="salmon_fresh_001",
            category_id="salmon",
            name="–õ–æ—Å–æ—Å—å —Ö–æ–ª–æ–¥–∂–µ–Ω–∏–π",
            description="–°–≤—ñ–∂–∏–π –Ω–æ—Ä–≤–µ–∑—å–∫–∏–π –ª–æ—Å–æ—Å—å –¥–ª—è –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è",
            price_per_kg=650,
            image_url="/static/images/salmon_fresh.jpg",
            packages=[
                {"id": "05kg", "weight": 0.5, "unit": "–∫–≥", "available": True},
                {"id": "1kg", "weight": 1, "unit": "–∫–≥", "available": True},
                {"id": "2kg", "weight": 2, "unit": "–∫–≥", "available": True}
            ],
            is_active=True
        ),
        Product(
            id="trout_001",
            category_id="salmon",
            name="–§–æ—Ä–µ–ª—å —Å–æ–ª–µ–Ω–∞",
            description="–°–≤—ñ–∂–∞ —Ñ–æ—Ä–µ–ª—å —Å–ª–∞–±–æ—Å–æ–ª–µ–Ω–∞",
            price_per_kg=550,
            image_url="/static/images/trout.jpg",
            packages=[
                {"id": "05kg", "weight": 0.5, "unit": "–∫–≥", "available": True},
                {"id": "1kg", "weight": 1, "unit": "–∫–≥", "available": True}
            ],
            is_active=True
        ),
        
        # Shellfish products
        Product(
            id="shrimp_001",
            category_id="shellfish",
            name="–ö—Ä–µ–≤–µ—Ç–∫–∏ –∫–æ—Ä–æ–ª—ñ–≤—Å—å–∫—ñ",
            description="–í–µ–ª–∏–∫—ñ –æ—á–∏—â–µ–Ω—ñ –∫—Ä–µ–≤–µ—Ç–∫–∏",
            price_per_kg=450,
            image_url="/static/images/shrimp.jpg",
            packages=[
                {"id": "1kg", "weight": 1, "unit": "–∫–≥", "available": True}
            ],
            is_active=True,
            is_featured=True
        ),
        Product(
            id="mussels_001",
            category_id="shellfish",
            name="–ú—ñ–¥—ñ—ó –≤–∞—Ä–µ–Ω—ñ",
            description="–í–∞—Ä–µ–Ω—ñ –º—ñ–¥—ñ—ó –≤ —Ä–∞–∫–æ–≤–∏–Ω–∞—Ö",
            price_per_kg=200,
            image_url="/static/images/mussels.jpg",
            packages=[
                {"id": "1kg", "weight": 1, "unit": "–∫–≥", "available": True},
                {"id": "2kg", "weight": 2, "unit": "–∫–≥", "available": True}
            ],
            is_active=True
        ),
        Product(
            id="crab_001",
            category_id="shellfish",
            name="–ö—Ä–∞–± –≤–∞—Ä–µ–Ω–∏–π",
            description="–ú'—è—Å–æ –∫—Ä–∞–±–∞ –≤–∞—Ä–µ–Ω–µ",
            price_per_kg=800,
            image_url="/static/images/crab.jpg",
            packages=[
                {"id": "05kg", "weight": 0.5, "unit": "–∫–≥", "available": True}
            ],
            is_active=True
        ),
        
        # Tom Yum kit
        Product(
            id="tomyum_kit_001",
            category_id="tomyum",
            name="Tom Yum –Ω–∞–±—ñ—Ä –ø–æ–≤–Ω–∏–π",
            description="–ü–æ–≤–Ω–∏–π –Ω–∞–±—ñ—Ä –¥–ª—è –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è —Å—É–ø—É Tom Yum: –ø–∞—Å—Ç–∞, —Ç—Ä–∞–≤–∏, –∫—Ä–µ–≤–µ—Ç–∫–∏",
            price_per_kg=350,
            image_url="/static/images/tomyum_kit.jpg",
            packages=[
                {"id": "set", "weight": 1, "unit": "–Ω–∞–±—ñ—Ä", "available": True, "note": "–ù–∞–±—ñ—Ä –Ω–∞ 4 –ø–æ—Ä—Ü—ñ—ó"}
            ],
            is_active=True,
            is_featured=True
        ),
        
        # Caviar products
        Product(
            id="caviar_red_001",
            category_id="caviar",
            name="–Ü–∫—Ä–∞ –ª–æ—Å–æ—Å–µ–≤–∞ –∑–µ—Ä–Ω–∏—Å—Ç–∞",
            description="–°–≤—ñ–∂–∞ –∑–µ—Ä–Ω–∏—Å—Ç–∞ —ñ–∫—Ä–∞ –ª–æ—Å–æ—Å–µ–≤–∏—Ö —Ä–∏–±",
            price_per_kg=1200,
            image_url="/static/images/caviar_red.jpg",
            packages=[
                {"id": "100g", "weight": 0.1, "unit": "100–≥", "available": True},
                {"id": "250g", "weight": 0.25, "unit": "250–≥", "available": True},
                {"id": "500g", "weight": 0.5, "unit": "500–≥", "available": True}
            ],
            is_active=True,
            is_featured=True
        ),
        Product(
            id="caviar_black_001",
            category_id="caviar",
            name="–Ü–∫—Ä–∞ –æ—Å–µ—Ç—Ä–æ–≤–∞",
            description="–ü—Ä–µ–º—ñ—É–º —ñ–∫—Ä–∞ –æ—Å–µ—Ç—Ä–æ–≤–∏—Ö —Ä–∏–±",
            price_per_kg=3500,
            image_url="/static/images/caviar_black.jpg",
            packages=[
                {"id": "50g", "weight": 0.05, "unit": "50–≥", "available": True},
                {"id": "100g", "weight": 0.1, "unit": "100–≥", "available": True}
            ],
            is_active=True
        )
    ]
    return products


async def create_districts():
    """Create delivery districts"""
    districts = [
        District(name="–®–µ–≤—á–µ–Ω–∫—ñ–≤—Å—å–∫–∏–π", is_active=True),
        District(name="–ü–µ—á–µ—Ä—Å—å–∫–∏–π", is_active=True),
        District(name="–ü–æ–¥—ñ–ª—å—Å—å–∫–∏–π", is_active=True),
        District(name="–û–±–æ–ª–æ–Ω—Å—å–∫–∏–π", is_active=True),
        District(name="–î–∞—Ä–Ω–∏—Ü—å–∫–∏–π", is_active=True),
        District(name="–î–Ω—ñ–ø—Ä–æ–≤—Å—å–∫–∏–π", is_active=True),
        District(name="–î–µ—Å–Ω—è–Ω—Å—å–∫–∏–π", is_active=True),
        District(name="–°–æ–ª–æ–º'—è–Ω—Å—å–∫–∏–π", is_active=True),
        District(name="–°–≤—è—Ç–æ—à–∏–Ω—Å—å–∫–∏–π", is_active=True),
        District(name="–ì–æ–ª–æ—Å—ñ—ó–≤—Å—å–∫–∏–π", is_active=True)
    ]
    return districts


async def create_promo_codes():
    """Create sample promo codes"""
    promo_codes = [
        PromoCode(
            code="GOLD2024",
            discount_percent=10,
            is_active=True,
            is_gold_code=True,
            usage_limit=100
        ),
        PromoCode(
            code="WELCOME50",
            discount_amount=50,
            is_active=True,
            usage_limit=50
        ),
        PromoCode(
            code="SEAFOOD15",
            discount_percent=15,
            is_active=True,
            usage_limit=200
        )
    ]
    return promo_codes


async def seed_database():
    """Main function to seed the database"""
    async with AsyncSessionLocal() as session:
        try:
            print("üå± Starting database seeding...")
            
            # Create categories
            print("üìÅ Creating categories...")
            categories = await create_categories()
            for category in categories:
                session.add(category)
            
            # Create products
            print("üêü Creating products...")
            products = await create_products()
            for product in products:
                session.add(product)
            
            # Create districts
            print("üó∫Ô∏è Creating districts...")
            districts = await create_districts()
            for district in districts:
                session.add(district)
            
            # Create promo codes
            print("üé´ Creating promo codes...")
            promo_codes = await create_promo_codes()
            for promo_code in promo_codes:
                session.add(promo_code)
            
            # Commit all changes
            await session.commit()
            
            print("‚úÖ Database seeding completed successfully!")
            print(f"   - Created {len(categories)} categories")
            print(f"   - Created {len(products)} products")
            print(f"   - Created {len(districts)} districts")
            print(f"   - Created {len(promo_codes)} promo codes")
            
        except Exception as e:
            print(f"‚ùå Error seeding database: {e}")
            await session.rollback()
            raise


if __name__ == "__main__":
    asyncio.run(seed_database())